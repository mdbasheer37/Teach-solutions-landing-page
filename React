<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Data Fetcher</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body {
            margin: 0;
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
        }
        
        #root {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 2rem;
        }

        .loading, .error, .empty {
            text-align: center;
            padding: 1rem;
            font-size: 1.2rem;
        }

        .loading {
            color: #3498db;
        }

        .error {
            color: #e74c3c;
        }

        .empty {
            color: #7f8c8d;
        }

        .list {
            list-style: none;
            padding: 0;
            display: grid;
            gap: 1rem;
        }

        .list-item {
            background-color: white;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }

        .list-item:hover {
            transform: translateY(-2px);
        }

        .user-card {
            padding: 1rem;
        }

        .user-card h3 {
            margin-top: 0;
            color: #2c3e50;
        }

        .user-card p {
            margin: 0.5rem 0;
            color: #34495e;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Reusable List Component
        function ListComponent({ items, renderItem, loading, error }) {
            if (loading) return <div className="loading">Loading data...</div>;
            if (error) return <div className="error">Error: {error}</div>;
            if (!items || items.length === 0) return <div className="empty">No items found</div>;

            return (
                <ul className="list">
                    {items.map((item, index) => (
                        <li key={index} className="list-item">
                            {renderItem ? renderItem(item) : item.toString()}
                        </li>
                    ))}
                </ul>
            );
        }

        // Main App Component
        function App() {
            const [data, setData] = useState([]);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);

            useEffect(() => {
                const fetchData = async () => {
                    try {
                        const response = await fetch('https://jsonplaceholder.typicode.com/users');
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const jsonData = await response.json();
                        setData(jsonData);
                    } catch (err) {
                        setError(err.message);
                    } finally {
                        setLoading(false);
                    }
                };

                fetchData();
            }, []);

            // Custom render function for list items
            const renderUserItem = (user) => (
                <div className="user-card">
                    <h3>{user.name}</h3>
                    <p>Email: {user.email}</p>
                    <p>Phone: {user.phone}</p>
                    <p>Company: {user.company.name}</p>
                </div>
            );

            return (
                <div className="app">
                    <h1>User List from API</h1>
                    <ListComponent
                        items={data}
                        renderItem={renderUserItem}
                        loading={loading}
                        error={error}
                    />
                </div>
            );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>
